import { AlgoFn } from "./algo";
import { Rune } from "./runes";
import { FzfResultItem, Options } from "./types";
export declare type ArrayElement<ArrayType extends readonly unknown[]> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;
declare type SortAttrs<U> = {
    sort?: true;
    tiebreakers?: Options<U>["tiebreakers"];
} | {
    sort: false;
};
export declare type OptsToUse<U> = Omit<Partial<Options<U>>, "sort" | "tiebreakers"> & SortAttrs<U>;
export declare type OptionsTuple<U> = U extends string ? [options?: OptsToUse<U>] : [options: OptsToUse<U> & {
    selector: Options<U>["selector"];
}];
export declare class Finder<L extends ReadonlyArray<any>> {
    runesList: Rune[][];
    items: L;
    readonly opts: Options<ArrayElement<L>>;
    algoFn: AlgoFn;
    constructor(list: L, ...optionsTuple: OptionsTuple<ArrayElement<L>>);
    find(query: string): FzfResultItem<ArrayElement<L>>[];
}
export {};
